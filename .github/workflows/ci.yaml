name: Tests

on: [push, pull_request]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cuda
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.2.2'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --tests

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Fix LibOpenCL on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install ocl-icd-opencl-dev -y

      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install CUDA Linux
        if: runner.os == 'Linux'
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.2.2'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Install CUDA Windows
        if: runner.os == 'Windows'
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.5.1'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo test regular features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p kaspa-miner

      - name: Run cargo test no asm
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p kaspa-miner --features=no-asm


      - name: Run cargo test no parking_lot
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p kaspa-miner --no-default-features

      - name: Run cargo test shuttle
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p kaspa-miner --no-default-features --features=shuttle

      - name: Run cargo test for kaspaopencl
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p kaspaopencl


  test-release:
    name: Test Suite Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Fix LibOpenCL on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install ocl-icd-opencl-dev -y

      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install CUDA Linux
        if: runner.os == 'Linux'
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.2.2'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Install CUDA Windows
        if: runner.os == 'Windows'
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.5.1'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo test release regular features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -p kaspa-miner

      - name: Run cargo test release no asm
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features=no-asm --release -p kaspa-miner

      - name: Run cargo test release no parking_lot
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --release -p kaspa-miner

      - name: Run cargo test release shuttle
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features=shuttle --release -p kaspa-miner

      - name: Run cargo test for kaspaopencl
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -p kaspaopencl

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install cuda
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.2.2'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}


      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --tests -- -D warnings
        
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Build gnu-linux on ubuntu-18.04 and musl on ubuntu latest
        os: [ ubuntu-18.04, windows-2019, macos-latest ]
        features: ["default", "kaspacuda/overclock "]
    name: Building debug binary of ${{ matrix.os }} ${{ matrix.features }}
    steps:
      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Fix LibOpenCL on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install ocl-icd-opencl-dev -y

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install CUDA Linux
        if: runner.os == 'Linux'
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.2.2'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Install CUDA Windows
        if: runner.os == 'Windows'
        uses: Jimver/cuda-toolkit@v0.2.10
        with:
          cuda: '11.5.1'
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'

      - name: Build on Linux GNU
        if: matrix.os == 'ubuntu-18.04'
        # We're using musl to make the binaries statically linked and portable
        run: |
          cargo build --target=x86_64-unknown-linux-gnu --release --all --features ${{ matrix.features }}
          feature_name=${{ matrix.features }}
          asset_name="kaspa-miner-${{ github.event.release.tag_name }}-${feature_name/\//-}-linux-gnu-amd64"
          strip ./target/x86_64-unknown-linux-gnu/release/kaspa-miner
          mkdir ${asset_name}
          mv ./target/x86_64-unknown-linux-gnu/release/kaspa-miner ${asset_name}/${asset_name}
          mv ./target/x86_64-unknown-linux-gnu/release/libkaspa*.so ${asset_name}/
          tar czvf ${asset_name}.tgz ${asset_name}
          echo "archive=${asset_name}.tgz" >> $GITHUB_ENV
          echo "asset_name=${asset_name}.tgz" >> $GITHUB_ENV

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cargo build --target=x86_64-pc-windows-msvc --release --all --features ${{ matrix.features }}
          feature_name=${{ matrix.features }}
          asset_name="kaspa-miner-${{ github.event.release.tag_name }}-${feature_name/\//-}-win64-amd64"
          mkdir ${asset_name}
          mv ./target/x86_64-pc-windows-msvc/release/kaspa-miner.exe ${asset_name}/${asset_name}.exe
          mv ./target/x86_64-pc-windows-msvc/release/kaspa*.dll ${asset_name}/
          bash ./integrations/windows/create_bat.sh ${asset_name}
          7z a -tzip -r ${asset_name}.zip ${asset_name}
          echo "archive=${asset_name}.zip" >> $GITHUB_ENV
          echo "asset_name=${asset_name}.zip" >> $GITHUB_ENV

      - name: Build on MacOS
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --target=x86_64-apple-darwin --release -p kaspa-miner
          asset_name="kaspa-miner-${{ github.event.release.tag_name }}-cpu-only-osx-amd64"
          mkdir ${asset_name}
          mv ./target/x86_64-apple-darwin/release/kaspa-miner ${asset_name}/${asset_name}
          tar czvf ${asset_name}.tgz ${asset_name}
          echo "archive=${asset_name}.tgz" >> $GITHUB_ENV
          echo "asset_name=${asset_name}.tgz" >> $GITHUB_ENV

      - name: Upload binary to GitHub 
        uses: actions/upload-artifact@v3
        with: 
          name: "${{ runner.os }} binary"
          path: "./${{ env.archive }}/"
